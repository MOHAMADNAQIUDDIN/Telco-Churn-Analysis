# -*- coding: utf-8 -*-
"""3. Machine Learning (Deployment)[TELCO CHURN]

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BeSx8WZjOlnDa4b1XS6E26xzL6Jenoaq

Install **Streamlit**

```
!pip install streamlit
```
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pickle
# import pandas as pd
# from sklearn.preprocessing import StandardScaler
# 
# st.title("Churn Analysis")
# model = pickle.load(open('/content/Model_SEL_BEST.pkl','rb'))
# df_1=pd.read_csv("/content/first_telc_up.csv")
# df_1['TotalCharges'] = pd.to_numeric(df_1['TotalCharges'], errors='coerce')
# 
# # Make Features Input
# sn = st.sidebar.slider("Senior Citizen?",0,1)
# tn = st.sidebar.slider("Tenure (in Months)",1,72)
# cn = st.sidebar.selectbox('Contract',('Month-to-month', 'One year', 'Two year'))
# mc = st.number_input("Monthly Charges")
# tc = st.number_input("Total Charges")
# dp = st.sidebar.selectbox('Dependents',('Yes', 'No'))
# ml = st.sidebar.selectbox('Multiple Lines',('Yes', 'No', 'No phone service'))
# ins = st.sidebar.selectbox('Internet Service',('Fiber optic', 'DSL', 'No'))
# os = st.sidebar.selectbox('Online Security',('Yes', 'No', 'No internet service'))
# ob = st.sidebar.selectbox('Online Backup',('Yes', 'No', 'No internet service'))
# ts = st.sidebar.selectbox('Tech Support',('Yes', 'No', 'No internet service'))
# pb = st.sidebar.selectbox('Paperless Billing',('Yes', 'No'))
# pm = st.sidebar.selectbox('Payment Method',('Electronic check', 'Mailed check','Bank transfer (automatic)','Credit card (automatic)'))
# 
# data = [[sn,tn,cn,mc,tc,dp,ml,ins,os,ob,ts,pb,pm]]
# df = pd.DataFrame(data,columns=['SeniorCitizen', 'tenure', 'Contract','MonthlyCharges', 'TotalCharges', 'Dependents',
#        'MultipleLines', 'InternetService','OnlineSecurity','OnlineBackup','TechSupport','PaperlessBilling',
#        'PaymentMethod'])
# 
# final_df = pd.concat([df_1,df],ignore_index=True)
# 
# # Format 'Tenure' into Group
# label = ["{}-{}".format(i,i+11) for i in range(1,72,12) ]
# final_df['tenure_group'] = pd.cut(final_df['tenure'],range(1,80,12),labels=label,right=False)
# final_df.drop('tenure',inplace=True,axis=1)
# 
# #Convert to Dummy
# final_df_dummy = pd.get_dummies(final_df)
# 
# # Scaling Features
# feature_scaled = StandardScaler().fit_transform(final_df_dummy)
# final_df_scaled = pd.DataFrame(feature_scaled, columns=final_df_dummy.columns)
# 
# #Prediction
# single = model.predict(final_df_scaled.tail(1))[0]
# #Prediction Probability
# probablity = model.predict_proba(final_df_dummy.tail(1))[0,1]
# 
# if st.button('Predict Churn'):
#     if single==1:
#         st.text("This customer is likely to be churned!!")
#         st.write("Confidence: {}".format(probablity*100))
#     else:
#         st.text("This customer is likely to continue!!")
#         st.write("Confidence: {}".format(probablity*100))

"""**Run on local Machine**
Open Anaconda Prompt

```
streamlit run app.py
```

**THIS IS ONLY FROM COLAB** <br>
**DON'T USE FOLLOWING CODE IF YOU'RE RUNNING CODE ON YOUR LOCAL MACHINE**<br>
Run **Streamlit** with **Local Tunnel**
"""

!streamlit run app.py & npx localtunnel --port 8501